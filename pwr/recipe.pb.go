// Code generated by protoc-gen-go.
// source: pwr/recipe.proto
// DO NOT EDIT!

/*
Package pwr is a generated protocol buffer package.

It is generated from these files:
	pwr/recipe.proto

It has these top-level messages:
	RecipeHeader
	RepoInfo
	RsyncSignatureHeader
	RsyncBlockHash
	RsyncOp
	Hash
*/
package pwr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HashType int32

const (
	// librsync default
	HashType_MD5 HashType = 0
	// https://godoc.org/golang.org/x/crypto/sha3#ShakeSum256
	HashType_SHAKESUM256 HashType = 1
)

var HashType_name = map[int32]string{
	0: "MD5",
	1: "SHAKESUM256",
}
var HashType_value = map[string]int32{
	"MD5":         0,
	"SHAKESUM256": 1,
}

func (x HashType) String() string {
	return proto.EnumName(HashType_name, int32(x))
}
func (HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RecipeHeader_Version int32

const (
	RecipeHeader_V1 RecipeHeader_Version = 0
)

var RecipeHeader_Version_name = map[int32]string{
	0: "V1",
}
var RecipeHeader_Version_value = map[string]int32{
	"V1": 0,
}

func (x RecipeHeader_Version) String() string {
	return proto.EnumName(RecipeHeader_Version_name, int32(x))
}
func (RecipeHeader_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type RecipeHeader_Compression int32

const (
	RecipeHeader_UNCOMPRESSED RecipeHeader_Compression = 0
	RecipeHeader_BROTLI       RecipeHeader_Compression = 1
)

var RecipeHeader_Compression_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "BROTLI",
}
var RecipeHeader_Compression_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"BROTLI":       1,
}

func (x RecipeHeader_Compression) String() string {
	return proto.EnumName(RecipeHeader_Compression_name, int32(x))
}
func (RecipeHeader_Compression) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type RsyncOp_Type int32

const (
	RsyncOp_BLOCK          RsyncOp_Type = 0
	RsyncOp_BLOCK_RANGE    RsyncOp_Type = 1
	RsyncOp_DATA           RsyncOp_Type = 2
	RsyncOp_HEY_YOU_DID_IT RsyncOp_Type = 2049
)

var RsyncOp_Type_name = map[int32]string{
	0:    "BLOCK",
	1:    "BLOCK_RANGE",
	2:    "DATA",
	2049: "HEY_YOU_DID_IT",
}
var RsyncOp_Type_value = map[string]int32{
	"BLOCK":          0,
	"BLOCK_RANGE":    1,
	"DATA":           2,
	"HEY_YOU_DID_IT": 2049,
}

func (x RsyncOp_Type) String() string {
	return proto.EnumName(RsyncOp_Type_name, int32(x))
}
func (RsyncOp_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type RecipeHeader struct {
	Version          RecipeHeader_Version     `protobuf:"varint,1,opt,name=version,enum=io.itch.wharf.pwr.RecipeHeader_Version" json:"version,omitempty"`
	Compression      RecipeHeader_Compression `protobuf:"varint,2,opt,name=compression,enum=io.itch.wharf.pwr.RecipeHeader_Compression" json:"compression,omitempty"`
	CompressionLevel int32                    `protobuf:"varint,3,opt,name=compressionLevel" json:"compressionLevel,omitempty"`
}

func (m *RecipeHeader) Reset()                    { *m = RecipeHeader{} }
func (m *RecipeHeader) String() string            { return proto.CompactTextString(m) }
func (*RecipeHeader) ProtoMessage()               {}
func (*RecipeHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RepoInfo struct {
	NumBlocks int64               `protobuf:"varint,16,opt,name=numBlocks" json:"numBlocks,omitempty"`
	Dirs      []*RepoInfo_Dir     `protobuf:"bytes,1,rep,name=dirs" json:"dirs,omitempty"`
	Files     []*RepoInfo_File    `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
	Symlinks  []*RepoInfo_Symlink `protobuf:"bytes,3,rep,name=symlinks" json:"symlinks,omitempty"`
}

func (m *RepoInfo) Reset()                    { *m = RepoInfo{} }
func (m *RepoInfo) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo) ProtoMessage()               {}
func (*RepoInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RepoInfo) GetDirs() []*RepoInfo_Dir {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *RepoInfo) GetFiles() []*RepoInfo_File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *RepoInfo) GetSymlinks() []*RepoInfo_Symlink {
	if m != nil {
		return m.Symlinks
	}
	return nil
}

type RepoInfo_Dir struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *RepoInfo_Dir) Reset()                    { *m = RepoInfo_Dir{} }
func (m *RepoInfo_Dir) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo_Dir) ProtoMessage()               {}
func (*RepoInfo_Dir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type RepoInfo_File struct {
	Path          string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode          uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Size          int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	BlockIndex    int64  `protobuf:"varint,4,opt,name=blockIndex" json:"blockIndex,omitempty"`
	BlockIndexEnd int64  `protobuf:"varint,5,opt,name=blockIndexEnd" json:"blockIndexEnd,omitempty"`
}

func (m *RepoInfo_File) Reset()                    { *m = RepoInfo_File{} }
func (m *RepoInfo_File) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo_File) ProtoMessage()               {}
func (*RepoInfo_File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type RepoInfo_Symlink struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Dest string `protobuf:"bytes,3,opt,name=dest" json:"dest,omitempty"`
}

func (m *RepoInfo_Symlink) Reset()                    { *m = RepoInfo_Symlink{} }
func (m *RepoInfo_Symlink) String() string            { return proto.CompactTextString(m) }
func (*RepoInfo_Symlink) ProtoMessage()               {}
func (*RepoInfo_Symlink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

type RsyncSignatureHeader struct {
	BlockCount uint64   `protobuf:"varint,1,opt,name=blockCount" json:"blockCount,omitempty"`
	HashType   HashType `protobuf:"varint,2,opt,name=hashType,enum=io.itch.wharf.pwr.HashType" json:"hashType,omitempty"`
}

func (m *RsyncSignatureHeader) Reset()                    { *m = RsyncSignatureHeader{} }
func (m *RsyncSignatureHeader) String() string            { return proto.CompactTextString(m) }
func (*RsyncSignatureHeader) ProtoMessage()               {}
func (*RsyncSignatureHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RsyncBlockHash struct {
	Index      uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	StrongHash []byte `protobuf:"bytes,2,opt,name=strongHash,proto3" json:"strongHash,omitempty"`
	WeakHash   uint32 `protobuf:"varint,3,opt,name=weakHash" json:"weakHash,omitempty"`
}

func (m *RsyncBlockHash) Reset()                    { *m = RsyncBlockHash{} }
func (m *RsyncBlockHash) String() string            { return proto.CompactTextString(m) }
func (*RsyncBlockHash) ProtoMessage()               {}
func (*RsyncBlockHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RsyncOp struct {
	Type          RsyncOp_Type `protobuf:"varint,1,opt,name=type,enum=io.itch.wharf.pwr.RsyncOp_Type" json:"type,omitempty"`
	BlockIndex    uint64       `protobuf:"varint,2,opt,name=blockIndex" json:"blockIndex,omitempty"`
	BlockIndexEnd uint64       `protobuf:"varint,3,opt,name=blockIndexEnd" json:"blockIndexEnd,omitempty"`
	Data          []byte       `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RsyncOp) Reset()                    { *m = RsyncOp{} }
func (m *RsyncOp) String() string            { return proto.CompactTextString(m) }
func (*RsyncOp) ProtoMessage()               {}
func (*RsyncOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Hash struct {
	Type     HashType `protobuf:"varint,1,opt,name=type,enum=io.itch.wharf.pwr.HashType" json:"type,omitempty"`
	Contents []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*RecipeHeader)(nil), "io.itch.wharf.pwr.RecipeHeader")
	proto.RegisterType((*RepoInfo)(nil), "io.itch.wharf.pwr.RepoInfo")
	proto.RegisterType((*RepoInfo_Dir)(nil), "io.itch.wharf.pwr.RepoInfo.Dir")
	proto.RegisterType((*RepoInfo_File)(nil), "io.itch.wharf.pwr.RepoInfo.File")
	proto.RegisterType((*RepoInfo_Symlink)(nil), "io.itch.wharf.pwr.RepoInfo.Symlink")
	proto.RegisterType((*RsyncSignatureHeader)(nil), "io.itch.wharf.pwr.RsyncSignatureHeader")
	proto.RegisterType((*RsyncBlockHash)(nil), "io.itch.wharf.pwr.RsyncBlockHash")
	proto.RegisterType((*RsyncOp)(nil), "io.itch.wharf.pwr.RsyncOp")
	proto.RegisterType((*Hash)(nil), "io.itch.wharf.pwr.Hash")
	proto.RegisterEnum("io.itch.wharf.pwr.HashType", HashType_name, HashType_value)
	proto.RegisterEnum("io.itch.wharf.pwr.RecipeHeader_Version", RecipeHeader_Version_name, RecipeHeader_Version_value)
	proto.RegisterEnum("io.itch.wharf.pwr.RecipeHeader_Compression", RecipeHeader_Compression_name, RecipeHeader_Compression_value)
	proto.RegisterEnum("io.itch.wharf.pwr.RsyncOp_Type", RsyncOp_Type_name, RsyncOp_Type_value)
}

var fileDescriptor0 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0xc5, 0xb1, 0x43, 0xc2, 0x24, 0x50, 0xb3, 0xe5, 0x10, 0xa5, 0x55, 0x8b, 0x5c, 0xa4, 0x22,
	0x50, 0x8d, 0x0a, 0x82, 0x1e, 0xab, 0x7c, 0xb8, 0x4d, 0x04, 0x21, 0xd5, 0x3a, 0x20, 0xd1, 0x4b,
	0x64, 0xe2, 0x85, 0x58, 0x4d, 0xbc, 0x96, 0xd7, 0x40, 0xe9, 0xad, 0xb7, 0x1e, 0xfa, 0xff, 0x7a,
	0xe8, 0x9f, 0xe9, 0xee, 0x38, 0x09, 0xa6, 0x50, 0xda, 0xde, 0x66, 0x67, 0xdf, 0x9b, 0x79, 0xf3,
	0x66, 0x6d, 0x30, 0xa3, 0xab, 0x78, 0x2b, 0x66, 0x83, 0x20, 0x62, 0x76, 0x14, 0xf3, 0x84, 0x93,
	0xe5, 0x80, 0xdb, 0x41, 0x32, 0x18, 0xda, 0x57, 0x43, 0x2f, 0x3e, 0xb3, 0xe5, 0xbd, 0xf5, 0x3d,
	0x07, 0x65, 0x8a, 0x98, 0x16, 0xf3, 0x7c, 0x16, 0x93, 0x1a, 0x14, 0x2e, 0x59, 0x2c, 0x02, 0x1e,
	0x56, 0xb4, 0x55, 0x6d, 0x7d, 0x69, 0xfb, 0xa5, 0x7d, 0x87, 0x65, 0x67, 0x19, 0xf6, 0x71, 0x0a,
	0xa7, 0x53, 0x1e, 0xe9, 0x40, 0x69, 0xc0, 0xc7, 0x51, 0xcc, 0x04, 0x96, 0xc9, 0x61, 0x99, 0xcd,
	0xbf, 0x95, 0x69, 0xdc, 0x50, 0x68, 0x96, 0x4f, 0x36, 0xc0, 0xcc, 0x1c, 0x0f, 0xd8, 0x25, 0x1b,
	0x55, 0x74, 0x59, 0x33, 0x4f, 0xef, 0xe4, 0xad, 0x65, 0x28, 0x4c, 0xe4, 0x90, 0x79, 0xc8, 0x1d,
	0xbf, 0x36, 0xe7, 0xac, 0x4d, 0x28, 0x65, 0x4a, 0x13, 0x13, 0xca, 0x47, 0x87, 0x8d, 0x6e, 0xe7,
	0x03, 0x75, 0x5c, 0xd7, 0x69, 0x9a, 0x73, 0x04, 0x60, 0xbe, 0x4e, 0xbb, 0xbd, 0x83, 0xb6, 0xa9,
	0x59, 0x3f, 0x74, 0x28, 0x52, 0x16, 0xf1, 0x76, 0x78, 0xc6, 0xc9, 0x53, 0x58, 0x08, 0x2f, 0xc6,
	0xf5, 0x11, 0x1f, 0x7c, 0x12, 0x15, 0x53, 0x76, 0xd4, 0xe9, 0x4d, 0x82, 0xec, 0x80, 0xe1, 0x07,
	0xb1, 0x90, 0x2e, 0xe9, 0xeb, 0xa5, 0xed, 0xe7, 0xf7, 0x8e, 0x97, 0x16, 0xb2, 0x9b, 0x41, 0x4c,
	0x11, 0x4c, 0xf6, 0x20, 0x7f, 0x16, 0x8c, 0x98, 0x90, 0xa6, 0x28, 0xd6, 0xea, 0x43, 0xac, 0x77,
	0x12, 0x48, 0x53, 0x38, 0x79, 0x0b, 0x45, 0x71, 0x3d, 0x1e, 0x05, 0xa1, 0x54, 0xa2, 0x23, 0xf5,
	0xc5, 0x43, 0x54, 0x37, 0xc5, 0xd2, 0x19, 0xa9, 0xfa, 0x0a, 0x74, 0xa9, 0x82, 0x10, 0x30, 0x22,
	0x2f, 0x19, 0xe2, 0x6a, 0x17, 0x28, 0xc6, 0x2a, 0x37, 0xe6, 0x3e, 0xc3, 0x3d, 0x2d, 0x52, 0x8c,
	0xab, 0xdf, 0x34, 0x30, 0x54, 0xff, 0x7f, 0x25, 0xa8, 0x9c, 0x08, 0xbe, 0x30, 0x5c, 0x8c, 0x4e,
	0x31, 0x26, 0xcf, 0x00, 0x4e, 0x95, 0x57, 0xed, 0xd0, 0x67, 0x9f, 0x2b, 0x06, 0xde, 0x64, 0x32,
	0x64, 0x0d, 0x16, 0x6f, 0x4e, 0x4e, 0xe8, 0x57, 0xf2, 0x08, 0xb9, 0x9d, 0xac, 0x3a, 0x50, 0x98,
	0x8c, 0xf3, 0x3f, 0x62, 0x7c, 0x26, 0x12, 0x14, 0x23, 0x71, 0x2a, 0xb6, 0x38, 0xac, 0x50, 0x71,
	0x1d, 0x0e, 0xdc, 0xe0, 0x3c, 0xf4, 0x92, 0x8b, 0x78, 0xfa, 0xde, 0xa7, 0x22, 0x1b, 0xfc, 0x22,
	0x4c, 0xb0, 0xb2, 0x41, 0x33, 0x19, 0xf2, 0x06, 0x8a, 0x43, 0x4f, 0x0c, 0x7b, 0xd7, 0x11, 0x9b,
	0xbc, 0xe4, 0x27, 0xf7, 0x38, 0xdf, 0x9a, 0x40, 0xe8, 0x0c, 0x6c, 0x9d, 0xc2, 0x12, 0x36, 0xc4,
	0xe7, 0xa2, 0xee, 0xc9, 0x0a, 0xe4, 0x03, 0xb4, 0x22, 0xed, 0x92, 0x1e, 0x94, 0x00, 0x91, 0xc4,
	0x3c, 0x3c, 0x57, 0x18, 0x6c, 0x51, 0xa6, 0x99, 0x0c, 0xa9, 0x42, 0xf1, 0x8a, 0x79, 0x58, 0x01,
	0x07, 0x5a, 0xa4, 0xb3, 0xb3, 0xf5, 0x53, 0x83, 0x02, 0x36, 0xe9, 0x46, 0xea, 0x3d, 0x26, 0x4a,
	0x64, 0xfa, 0xd5, 0xde, 0xfb, 0x1e, 0x53, 0xa4, 0x8d, 0x42, 0x11, 0xfc, 0xdb, 0x8a, 0x72, 0x99,
	0xe9, 0xff, 0xb0, 0x22, 0x1d, 0x21, 0xb7, 0x93, 0xe8, 0xb7, 0x97, 0x78, 0xb8, 0xe2, 0x32, 0xc5,
	0xd8, 0xaa, 0x81, 0xa1, 0xfa, 0x90, 0x05, 0xc8, 0xd7, 0x0f, 0xba, 0x8d, 0x7d, 0xf9, 0xa1, 0x3d,
	0x82, 0x12, 0x86, 0x7d, 0x5a, 0x3b, 0x7c, 0xef, 0x98, 0x1a, 0x29, 0x82, 0xd1, 0xac, 0xf5, 0x6a,
	0x66, 0x8e, 0x3c, 0x86, 0xa5, 0x96, 0x73, 0xd2, 0x3f, 0xe9, 0x1e, 0xf5, 0x9b, 0xed, 0x66, 0xbf,
	0xdd, 0x33, 0xbf, 0x9a, 0x96, 0x0b, 0x06, 0x3a, 0xb0, 0x75, 0x6b, 0xb2, 0x07, 0xed, 0x4f, 0xa7,
	0x92, 0x96, 0x0d, 0x78, 0x98, 0xb0, 0x30, 0x11, 0x13, 0x43, 0x67, 0xe7, 0x8d, 0x35, 0x28, 0x4e,
	0xd1, 0xa4, 0x00, 0x7a, 0xa7, 0xb9, 0x9b, 0x2a, 0x73, 0x5b, 0xb5, 0x7d, 0xc7, 0x3d, 0xea, 0x6c,
	0xef, 0xee, 0x99, 0x5a, 0x3d, 0xff, 0x51, 0x97, 0x75, 0x4f, 0xe7, 0xf1, 0xbf, 0xb9, 0xf3, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0xcb, 0x73, 0x43, 0xcc, 0x4b, 0x05, 0x00, 0x00,
}
