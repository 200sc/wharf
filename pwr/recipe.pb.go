// Code generated by protoc-gen-go.
// source: pwr/recipe.proto
// DO NOT EDIT!

/*
Package pwr is a generated protocol buffer package.

It is generated from these files:
	pwr/recipe.proto

It has these top-level messages:
	RecipeHeader
	Container
	SignatureHeader
	BlockHash
	SyncHeader
	SyncOp
	Hash
*/
package pwr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type HashType int32

const (
	// librsync default
	HashType_MD5 HashType = 0
	// cf. https://godoc.org/golang.org/x/crypto/sha3
	HashType_SHAKESUM128 HashType = 1
)

var HashType_name = map[int32]string{
	0: "MD5",
	1: "SHAKESUM128",
}
var HashType_value = map[string]int32{
	"MD5":         0,
	"SHAKESUM128": 1,
}

func (x HashType) String() string {
	return proto.EnumName(HashType_name, int32(x))
}
func (HashType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RecipeHeader_Version int32

const (
	RecipeHeader_V1 RecipeHeader_Version = 0
)

var RecipeHeader_Version_name = map[int32]string{
	0: "V1",
}
var RecipeHeader_Version_value = map[string]int32{
	"V1": 0,
}

func (x RecipeHeader_Version) String() string {
	return proto.EnumName(RecipeHeader_Version_name, int32(x))
}
func (RecipeHeader_Version) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type RecipeHeader_Compression int32

const (
	RecipeHeader_UNCOMPRESSED RecipeHeader_Compression = 0
	RecipeHeader_BROTLI       RecipeHeader_Compression = 1
)

var RecipeHeader_Compression_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "BROTLI",
}
var RecipeHeader_Compression_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"BROTLI":       1,
}

func (x RecipeHeader_Compression) String() string {
	return proto.EnumName(RecipeHeader_Compression_name, int32(x))
}
func (RecipeHeader_Compression) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type SyncOp_Type int32

const (
	SyncOp_BLOCK          SyncOp_Type = 0
	SyncOp_BLOCK_RANGE    SyncOp_Type = 1
	SyncOp_DATA           SyncOp_Type = 2
	SyncOp_HEY_YOU_DID_IT SyncOp_Type = 2049
)

var SyncOp_Type_name = map[int32]string{
	0:    "BLOCK",
	1:    "BLOCK_RANGE",
	2:    "DATA",
	2049: "HEY_YOU_DID_IT",
}
var SyncOp_Type_value = map[string]int32{
	"BLOCK":          0,
	"BLOCK_RANGE":    1,
	"DATA":           2,
	"HEY_YOU_DID_IT": 2049,
}

func (x SyncOp_Type) String() string {
	return proto.EnumName(SyncOp_Type_name, int32(x))
}
func (SyncOp_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type RecipeHeader struct {
	Version          RecipeHeader_Version     `protobuf:"varint,1,opt,name=version,enum=io.itch.wharf.pwr.RecipeHeader_Version" json:"version,omitempty"`
	Compression      RecipeHeader_Compression `protobuf:"varint,2,opt,name=compression,enum=io.itch.wharf.pwr.RecipeHeader_Compression" json:"compression,omitempty"`
	CompressionLevel int32                    `protobuf:"varint,3,opt,name=compressionLevel" json:"compressionLevel,omitempty"`
}

func (m *RecipeHeader) Reset()                    { *m = RecipeHeader{} }
func (m *RecipeHeader) String() string            { return proto.CompactTextString(m) }
func (*RecipeHeader) ProtoMessage()               {}
func (*RecipeHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Container struct {
	Size     int64                `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Dirs     []*Container_Dir     `protobuf:"bytes,2,rep,name=dirs" json:"dirs,omitempty"`
	Files    []*Container_File    `protobuf:"bytes,3,rep,name=files" json:"files,omitempty"`
	Symlinks []*Container_Symlink `protobuf:"bytes,4,rep,name=symlinks" json:"symlinks,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Container) GetDirs() []*Container_Dir {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *Container) GetFiles() []*Container_File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Container) GetSymlinks() []*Container_Symlink {
	if m != nil {
		return m.Symlinks
	}
	return nil
}

type Container_Dir struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *Container_Dir) Reset()                    { *m = Container_Dir{} }
func (m *Container_Dir) String() string            { return proto.CompactTextString(m) }
func (*Container_Dir) ProtoMessage()               {}
func (*Container_Dir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Container_File struct {
	Path       string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode       uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Size       int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	BlockIndex int64  `protobuf:"varint,4,opt,name=blockIndex" json:"blockIndex,omitempty"`
	BlockSpan  int64  `protobuf:"varint,5,opt,name=blockSpan" json:"blockSpan,omitempty"`
}

func (m *Container_File) Reset()                    { *m = Container_File{} }
func (m *Container_File) String() string            { return proto.CompactTextString(m) }
func (*Container_File) ProtoMessage()               {}
func (*Container_File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type Container_Symlink struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Dest string `protobuf:"bytes,3,opt,name=dest" json:"dest,omitempty"`
}

func (m *Container_Symlink) Reset()                    { *m = Container_Symlink{} }
func (m *Container_Symlink) String() string            { return proto.CompactTextString(m) }
func (*Container_Symlink) ProtoMessage()               {}
func (*Container_Symlink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

type SignatureHeader struct {
	BlockCount int64    `protobuf:"varint,1,opt,name=blockCount" json:"blockCount,omitempty"`
	HashType   HashType `protobuf:"varint,2,opt,name=hashType,enum=io.itch.wharf.pwr.HashType" json:"hashType,omitempty"`
}

func (m *SignatureHeader) Reset()                    { *m = SignatureHeader{} }
func (m *SignatureHeader) String() string            { return proto.CompactTextString(m) }
func (*SignatureHeader) ProtoMessage()               {}
func (*SignatureHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BlockHash struct {
	WeakHash   int32  `protobuf:"varint,3,opt,name=weakHash" json:"weakHash,omitempty"`
	StrongHash []byte `protobuf:"bytes,4,opt,name=strongHash,proto3" json:"strongHash,omitempty"`
}

func (m *BlockHash) Reset()                    { *m = BlockHash{} }
func (m *BlockHash) String() string            { return proto.CompactTextString(m) }
func (*BlockHash) ProtoMessage()               {}
func (*BlockHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SyncHeader struct {
	FileIndex int64 `protobuf:"varint,1,opt,name=fileIndex" json:"fileIndex,omitempty"`
}

func (m *SyncHeader) Reset()                    { *m = SyncHeader{} }
func (m *SyncHeader) String() string            { return proto.CompactTextString(m) }
func (*SyncHeader) ProtoMessage()               {}
func (*SyncHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SyncOp struct {
	Type       SyncOp_Type `protobuf:"varint,1,opt,name=type,enum=io.itch.wharf.pwr.SyncOp_Type" json:"type,omitempty"`
	FileIndex  int64       `protobuf:"varint,2,opt,name=fileIndex" json:"fileIndex,omitempty"`
	BlockIndex int64       `protobuf:"varint,3,opt,name=blockIndex" json:"blockIndex,omitempty"`
	BlockSpan  int64       `protobuf:"varint,4,opt,name=blockSpan" json:"blockSpan,omitempty"`
	Data       []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SyncOp) Reset()                    { *m = SyncOp{} }
func (m *SyncOp) String() string            { return proto.CompactTextString(m) }
func (*SyncOp) ProtoMessage()               {}
func (*SyncOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Hash struct {
	Type     HashType `protobuf:"varint,1,opt,name=type,enum=io.itch.wharf.pwr.HashType" json:"type,omitempty"`
	Contents []byte   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*RecipeHeader)(nil), "io.itch.wharf.pwr.RecipeHeader")
	proto.RegisterType((*Container)(nil), "io.itch.wharf.pwr.Container")
	proto.RegisterType((*Container_Dir)(nil), "io.itch.wharf.pwr.Container.Dir")
	proto.RegisterType((*Container_File)(nil), "io.itch.wharf.pwr.Container.File")
	proto.RegisterType((*Container_Symlink)(nil), "io.itch.wharf.pwr.Container.Symlink")
	proto.RegisterType((*SignatureHeader)(nil), "io.itch.wharf.pwr.SignatureHeader")
	proto.RegisterType((*BlockHash)(nil), "io.itch.wharf.pwr.BlockHash")
	proto.RegisterType((*SyncHeader)(nil), "io.itch.wharf.pwr.SyncHeader")
	proto.RegisterType((*SyncOp)(nil), "io.itch.wharf.pwr.SyncOp")
	proto.RegisterType((*Hash)(nil), "io.itch.wharf.pwr.Hash")
	proto.RegisterEnum("io.itch.wharf.pwr.HashType", HashType_name, HashType_value)
	proto.RegisterEnum("io.itch.wharf.pwr.RecipeHeader_Version", RecipeHeader_Version_name, RecipeHeader_Version_value)
	proto.RegisterEnum("io.itch.wharf.pwr.RecipeHeader_Compression", RecipeHeader_Compression_name, RecipeHeader_Compression_value)
	proto.RegisterEnum("io.itch.wharf.pwr.SyncOp_Type", SyncOp_Type_name, SyncOp_Type_value)
}

var fileDescriptor0 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0xc5, 0xb1, 0xf3, 0x35, 0x49, 0xc1, 0x6c, 0x2f, 0x51, 0x5a, 0x21, 0x6a, 0x21, 0x15, 0x81,
	0x6a, 0x44, 0xda, 0xaa, 0x3d, 0x36, 0x1f, 0x2e, 0x89, 0x20, 0xa4, 0x5a, 0x07, 0x24, 0x7a, 0x89,
	0x8c, 0xb3, 0x10, 0x97, 0x60, 0x5b, 0xb6, 0x81, 0xd2, 0x53, 0x7b, 0xef, 0x1f, 0xeb, 0xaf, 0xe9,
	0x5f, 0xe8, 0xee, 0xd8, 0x31, 0x06, 0xa2, 0xb4, 0xbd, 0xcd, 0xce, 0xbc, 0x37, 0x7e, 0x33, 0x6f,
	0xd7, 0xa0, 0xfa, 0x37, 0xc1, 0x4e, 0xc0, 0x6c, 0xc7, 0x67, 0xba, 0x1f, 0x78, 0x91, 0x47, 0x56,
	0x1d, 0x4f, 0x77, 0x22, 0x7b, 0xa2, 0xdf, 0x4c, 0xac, 0xe0, 0x4c, 0xe7, 0x75, 0xed, 0x67, 0x0e,
	0xaa, 0x14, 0x31, 0x5d, 0x66, 0x8d, 0x59, 0x40, 0x9a, 0x50, 0xbc, 0x66, 0x41, 0xe8, 0x78, 0x6e,
	0x4d, 0x5a, 0x97, 0x36, 0x97, 0x1b, 0x2f, 0xf5, 0x47, 0x2c, 0x3d, 0xcb, 0xd0, 0x8f, 0x63, 0x38,
	0x9d, 0xf1, 0x48, 0x1f, 0x2a, 0xb6, 0x77, 0xe9, 0x07, 0x2c, 0xc4, 0x36, 0x39, 0x6c, 0xb3, 0xfd,
	0xb7, 0x36, 0xed, 0x3b, 0x0a, 0xcd, 0xf2, 0xc9, 0x16, 0xa8, 0x99, 0xe3, 0x01, 0xbb, 0x66, 0xd3,
	0x9a, 0xcc, 0x7b, 0xe6, 0xe9, 0xa3, 0xbc, 0xb6, 0x0a, 0xc5, 0x44, 0x0e, 0x29, 0x40, 0xee, 0x78,
	0x57, 0x5d, 0xd2, 0xb6, 0xa1, 0x92, 0x69, 0x4d, 0x54, 0xa8, 0x1e, 0x1d, 0xb6, 0x07, 0xfd, 0x4f,
	0xd4, 0x30, 0x4d, 0xa3, 0xa3, 0x2e, 0x11, 0x80, 0x42, 0x8b, 0x0e, 0x86, 0x07, 0x3d, 0x55, 0xd2,
	0x7e, 0xc9, 0x50, 0x6e, 0x7b, 0x6e, 0x64, 0x39, 0x2e, 0xdf, 0x05, 0x01, 0x25, 0x74, 0xbe, 0x31,
	0x5c, 0x84, 0x4c, 0x31, 0x26, 0x6f, 0x40, 0x19, 0x3b, 0x41, 0xc8, 0xa7, 0x92, 0x37, 0x2b, 0x8d,
	0xf5, 0x39, 0x53, 0xa5, 0x7c, 0xbd, 0xe3, 0x04, 0x14, 0xd1, 0xe4, 0x1d, 0xe4, 0xcf, 0x9c, 0x29,
	0x0b, 0xb9, 0x70, 0x41, 0x7b, 0xb1, 0x90, 0xf6, 0x91, 0x23, 0x69, 0x8c, 0x27, 0x1f, 0xa0, 0x14,
	0xde, 0x5e, 0x4e, 0x1d, 0xf7, 0x22, 0xac, 0x29, 0xc8, 0xdd, 0x58, 0xc8, 0x35, 0x63, 0x30, 0x4d,
	0x59, 0xf5, 0x57, 0x20, 0x73, 0x1d, 0x62, 0x16, 0xdf, 0x8a, 0x26, 0x38, 0x4b, 0x99, 0x62, 0x2c,
	0x72, 0x97, 0xde, 0x98, 0xa1, 0x43, 0x4f, 0x28, 0xc6, 0xf5, 0xef, 0x12, 0x28, 0x42, 0xc0, 0xbf,
	0x12, 0xd2, 0x25, 0xc9, 0x99, 0x25, 0xad, 0x01, 0x9c, 0x4e, 0x3d, 0xfb, 0xa2, 0xe7, 0x8e, 0xd9,
	0x57, 0xae, 0x5b, 0x54, 0x32, 0x19, 0xf2, 0x1c, 0xca, 0x78, 0x32, 0x7d, 0xcb, 0xad, 0xe5, 0xb1,
	0x7c, 0x97, 0xa8, 0x1b, 0x50, 0x4c, 0xc6, 0xf8, 0x1f, 0x11, 0x63, 0x16, 0x46, 0x28, 0x82, 0xe3,
	0x44, 0xac, 0x7d, 0x81, 0x15, 0xd3, 0x39, 0x77, 0xad, 0xe8, 0x2a, 0x98, 0x5d, 0xee, 0x99, 0xae,
	0xb6, 0x77, 0xe5, 0x46, 0x89, 0xad, 0x99, 0x0c, 0xb7, 0xa9, 0x34, 0xb1, 0xc2, 0xc9, 0xf0, 0xd6,
	0x67, 0xc9, 0xb5, 0x7d, 0x36, 0x67, 0xdb, 0xdd, 0x04, 0x42, 0x53, 0xb0, 0xb6, 0x07, 0xe5, 0x96,
	0x68, 0x23, 0x4a, 0xa4, 0x0e, 0xa5, 0x1b, 0x66, 0x61, 0x9c, 0x5c, 0xd4, 0xf4, 0x2c, 0x14, 0x84,
	0x51, 0xe0, 0xb9, 0xe7, 0x58, 0x15, 0x9b, 0xa9, 0xd2, 0x4c, 0x46, 0xdb, 0x02, 0x30, 0x6f, 0x5d,
	0x3b, 0xd1, 0xcb, 0xf7, 0x24, 0xae, 0x41, 0xbc, 0xc6, 0x58, 0xee, 0x5d, 0x42, 0xfb, 0x2d, 0x41,
	0x41, 0x80, 0x07, 0x3e, 0x69, 0x80, 0x12, 0x09, 0xd1, 0xf1, 0x93, 0x5d, 0x9b, 0x23, 0x3a, 0x06,
	0xea, 0xa8, 0x1b, 0xb1, 0xf7, 0x9b, 0xe7, 0x1e, 0x34, 0x7f, 0x60, 0xa1, 0xbc, 0xd8, 0x42, 0xe5,
	0x81, 0x85, 0xe8, 0x87, 0x15, 0x59, 0xe8, 0x6d, 0x95, 0x62, 0xac, 0x35, 0x41, 0x11, 0x5f, 0x27,
	0x65, 0xc8, 0xb7, 0x0e, 0x06, 0xed, 0x7d, 0xfe, 0xf4, 0x56, 0xa0, 0x82, 0xe1, 0x88, 0x36, 0x0f,
	0xf7, 0x0c, 0x55, 0x22, 0x25, 0x50, 0x3a, 0xcd, 0x61, 0x53, 0xcd, 0x91, 0xa7, 0xb0, 0xdc, 0x35,
	0x4e, 0x46, 0x27, 0x83, 0xa3, 0x51, 0xa7, 0xd7, 0x19, 0xf5, 0x86, 0xea, 0x0f, 0x55, 0x33, 0x41,
	0xc1, 0x2d, 0xee, 0xdc, 0x1b, 0x77, 0xa1, 0x47, 0xf1, 0xac, 0xdc, 0x12, 0x9b, 0xbf, 0x11, 0xe6,
	0x46, 0x21, 0x8e, 0x5a, 0xa5, 0xe9, 0x79, 0x6b, 0x03, 0x4a, 0x33, 0x34, 0x29, 0x82, 0xdc, 0xef,
	0xbc, 0x8d, 0x95, 0x99, 0xdd, 0xe6, 0xbe, 0x61, 0x1e, 0xf5, 0x77, 0x1b, 0xef, 0x55, 0xa9, 0x95,
	0xff, 0x2c, 0xf3, 0xbe, 0xa7, 0x05, 0xfc, 0x93, 0xbe, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa9,
	0x1b, 0x3c, 0x0a, 0x5d, 0x05, 0x00, 0x00,
}
