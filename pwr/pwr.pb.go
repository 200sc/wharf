// Code generated by protoc-gen-go.
// source: pwr/pwr.proto
// DO NOT EDIT!

/*
Package pwr is a generated protocol buffer package.

It is generated from these files:
	pwr/pwr.proto

It has these top-level messages:
	PatchHeader
	SyncHeader
	SyncOp
	SignatureHeader
	BlockHash
	CompressionSettings
*/
package pwr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CompressionAlgorithm int32

const (
	CompressionAlgorithm_UNCOMPRESSED CompressionAlgorithm = 0
	CompressionAlgorithm_BROTLI       CompressionAlgorithm = 1
)

var CompressionAlgorithm_name = map[int32]string{
	0: "UNCOMPRESSED",
	1: "BROTLI",
}
var CompressionAlgorithm_value = map[string]int32{
	"UNCOMPRESSED": 0,
	"BROTLI":       1,
}

func (x CompressionAlgorithm) String() string {
	return proto.EnumName(CompressionAlgorithm_name, int32(x))
}
func (CompressionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SyncOp_Type int32

const (
	SyncOp_BLOCK_RANGE    SyncOp_Type = 0
	SyncOp_DATA           SyncOp_Type = 1
	SyncOp_HEY_YOU_DID_IT SyncOp_Type = 2049
)

var SyncOp_Type_name = map[int32]string{
	0:    "BLOCK_RANGE",
	1:    "DATA",
	2049: "HEY_YOU_DID_IT",
}
var SyncOp_Type_value = map[string]int32{
	"BLOCK_RANGE":    0,
	"DATA":           1,
	"HEY_YOU_DID_IT": 2049,
}

func (x SyncOp_Type) String() string {
	return proto.EnumName(SyncOp_Type_name, int32(x))
}
func (SyncOp_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type PatchHeader struct {
	Compression *CompressionSettings `protobuf:"bytes,1,opt,name=compression" json:"compression,omitempty"`
}

func (m *PatchHeader) Reset()                    { *m = PatchHeader{} }
func (m *PatchHeader) String() string            { return proto.CompactTextString(m) }
func (*PatchHeader) ProtoMessage()               {}
func (*PatchHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PatchHeader) GetCompression() *CompressionSettings {
	if m != nil {
		return m.Compression
	}
	return nil
}

type SyncHeader struct {
	FileIndex int64 `protobuf:"varint,16,opt,name=fileIndex" json:"fileIndex,omitempty"`
}

func (m *SyncHeader) Reset()                    { *m = SyncHeader{} }
func (m *SyncHeader) String() string            { return proto.CompactTextString(m) }
func (*SyncHeader) ProtoMessage()               {}
func (*SyncHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SyncOp struct {
	Type       SyncOp_Type `protobuf:"varint,1,opt,name=type,enum=io.itch.wharf.pwr.SyncOp_Type" json:"type,omitempty"`
	FileIndex  int64       `protobuf:"varint,2,opt,name=fileIndex" json:"fileIndex,omitempty"`
	BlockIndex int64       `protobuf:"varint,3,opt,name=blockIndex" json:"blockIndex,omitempty"`
	BlockSpan  int64       `protobuf:"varint,4,opt,name=blockSpan" json:"blockSpan,omitempty"`
	Data       []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SyncOp) Reset()                    { *m = SyncOp{} }
func (m *SyncOp) String() string            { return proto.CompactTextString(m) }
func (*SyncOp) ProtoMessage()               {}
func (*SyncOp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SignatureHeader struct {
	Compression *CompressionSettings `protobuf:"bytes,1,opt,name=compression" json:"compression,omitempty"`
}

func (m *SignatureHeader) Reset()                    { *m = SignatureHeader{} }
func (m *SignatureHeader) String() string            { return proto.CompactTextString(m) }
func (*SignatureHeader) ProtoMessage()               {}
func (*SignatureHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SignatureHeader) GetCompression() *CompressionSettings {
	if m != nil {
		return m.Compression
	}
	return nil
}

type BlockHash struct {
	WeakHash   uint32 `protobuf:"varint,1,opt,name=weakHash" json:"weakHash,omitempty"`
	StrongHash []byte `protobuf:"bytes,2,opt,name=strongHash,proto3" json:"strongHash,omitempty"`
}

func (m *BlockHash) Reset()                    { *m = BlockHash{} }
func (m *BlockHash) String() string            { return proto.CompactTextString(m) }
func (*BlockHash) ProtoMessage()               {}
func (*BlockHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CompressionSettings struct {
	Algorithm CompressionAlgorithm `protobuf:"varint,1,opt,name=algorithm,enum=io.itch.wharf.pwr.CompressionAlgorithm" json:"algorithm,omitempty"`
	Quality   int32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
}

func (m *CompressionSettings) Reset()                    { *m = CompressionSettings{} }
func (m *CompressionSettings) String() string            { return proto.CompactTextString(m) }
func (*CompressionSettings) ProtoMessage()               {}
func (*CompressionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*PatchHeader)(nil), "io.itch.wharf.pwr.PatchHeader")
	proto.RegisterType((*SyncHeader)(nil), "io.itch.wharf.pwr.SyncHeader")
	proto.RegisterType((*SyncOp)(nil), "io.itch.wharf.pwr.SyncOp")
	proto.RegisterType((*SignatureHeader)(nil), "io.itch.wharf.pwr.SignatureHeader")
	proto.RegisterType((*BlockHash)(nil), "io.itch.wharf.pwr.BlockHash")
	proto.RegisterType((*CompressionSettings)(nil), "io.itch.wharf.pwr.CompressionSettings")
	proto.RegisterEnum("io.itch.wharf.pwr.CompressionAlgorithm", CompressionAlgorithm_name, CompressionAlgorithm_value)
	proto.RegisterEnum("io.itch.wharf.pwr.SyncOp_Type", SyncOp_Type_name, SyncOp_Type_value)
}

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0x4f, 0x6f, 0x94, 0x40,
	0x14, 0x97, 0x2e, 0xbb, 0x76, 0xdf, 0xf6, 0x0f, 0x4e, 0x3d, 0x10, 0x63, 0x1a, 0xc3, 0x41, 0x4d,
	0x0f, 0x98, 0xac, 0xc6, 0xfb, 0xb2, 0x90, 0x42, 0xac, 0xa5, 0x19, 0x68, 0x4c, 0xf5, 0x40, 0xa6,
	0xec, 0x14, 0x26, 0x52, 0x06, 0x87, 0xa9, 0xeb, 0x1e, 0xfd, 0xae, 0x7e, 0x10, 0x87, 0xd9, 0xb6,
	0xbb, 0xea, 0xc6, 0x53, 0x0f, 0x24, 0xf3, 0x7e, 0x7f, 0x87, 0x07, 0xb0, 0xdb, 0xcc, 0xc5, 0x1b,
	0xf5, 0xb8, 0x8d, 0xe0, 0x92, 0xa3, 0x27, 0x8c, 0xbb, 0x4c, 0xe6, 0xa5, 0x3b, 0x2f, 0x89, 0xb8,
	0x72, 0x15, 0xe1, 0x7c, 0x82, 0xd1, 0x19, 0x51, 0x50, 0x48, 0xc9, 0x8c, 0x0a, 0x14, 0xc2, 0x28,
	0xe7, 0xd7, 0x8d, 0xa0, 0x6d, 0xcb, 0x78, 0x6d, 0x1b, 0x2f, 0x8c, 0xd7, 0xa3, 0xf1, 0x4b, 0xf7,
	0x1f, 0x9f, 0x3b, 0x5d, 0xa9, 0x12, 0x2a, 0x25, 0xab, 0x8b, 0x16, 0xaf, 0x5b, 0x9d, 0x23, 0x80,
	0x64, 0x51, 0xe7, 0xb7, 0xb9, 0xcf, 0x61, 0x78, 0xc5, 0x2a, 0x1a, 0xd5, 0x33, 0xfa, 0xc3, 0xb6,
	0x54, 0x6a, 0x0f, 0xaf, 0x00, 0xe7, 0x97, 0x01, 0x83, 0x4e, 0x1c, 0x37, 0x68, 0x0c, 0xa6, 0x5c,
	0x34, 0x54, 0x37, 0xef, 0x8d, 0x0f, 0x37, 0x34, 0x2f, 0x85, 0x6e, 0xaa, 0x54, 0x58, 0x6b, 0xff,
	0x0c, 0xdf, 0xfa, 0x2b, 0x1c, 0x1d, 0x02, 0x5c, 0x56, 0x3c, 0xff, 0xba, 0xa4, 0x7b, 0x9a, 0x5e,
	0x43, 0x3a, 0xb7, 0x9e, 0x92, 0x86, 0xd4, 0xb6, 0xb9, 0x74, 0xdf, 0x03, 0x08, 0x81, 0x39, 0x23,
	0x92, 0xd8, 0x7d, 0x45, 0xec, 0x60, 0x7d, 0x76, 0xde, 0x83, 0xd9, 0xb5, 0xa3, 0x7d, 0x18, 0x79,
	0x27, 0xf1, 0xf4, 0x43, 0x86, 0x27, 0xa7, 0xc7, 0x81, 0xf5, 0x08, 0x6d, 0x83, 0xe9, 0x4f, 0xd2,
	0x89, 0x65, 0xa0, 0x03, 0xd8, 0x0b, 0x83, 0x8b, 0xec, 0x22, 0x3e, 0xcf, 0xfc, 0xc8, 0xcf, 0xa2,
	0xd4, 0xfa, 0x69, 0x39, 0x5f, 0x60, 0x3f, 0x61, 0x45, 0x4d, 0xe4, 0x8d, 0xa0, 0x0f, 0xbe, 0xef,
	0x63, 0x18, 0x7a, 0xdd, 0xad, 0x43, 0xd2, 0x96, 0xe8, 0x19, 0x6c, 0xcf, 0x29, 0xd1, 0x67, 0x9d,
	0xb9, 0x8b, 0xef, 0xe7, 0x6e, 0x1f, 0xad, 0x14, 0xbc, 0x2e, 0x34, 0xbb, 0xa5, 0xdf, 0x6b, 0x0d,
	0x71, 0xbe, 0xc3, 0xc1, 0x86, 0x32, 0x14, 0xc0, 0x90, 0x54, 0x05, 0x17, 0x4c, 0x96, 0xd7, 0xb7,
	0x5f, 0xe7, 0xd5, 0xff, 0xef, 0x39, 0xb9, 0x93, 0xe3, 0x95, 0x13, 0xd9, 0xf0, 0xf8, 0xdb, 0x0d,
	0xa9, 0x98, 0x5c, 0xe8, 0xea, 0x3e, 0xbe, 0x1b, 0x8f, 0xde, 0xc1, 0xd3, 0x4d, 0x66, 0x64, 0xc1,
	0xce, 0xf9, 0xe9, 0x34, 0xfe, 0x78, 0x86, 0x83, 0x24, 0x09, 0x7c, 0xb5, 0x66, 0x80, 0x81, 0x87,
	0xe3, 0xf4, 0x24, 0xb2, 0x0c, 0xaf, 0xff, 0xb9, 0xa7, 0x6a, 0x2f, 0x07, 0xfa, 0x07, 0x7f, 0xfb,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x61, 0xf5, 0xa1, 0xd4, 0xf1, 0x02, 0x00, 0x00,
}
